import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';
import { NextRequest, NextResponse } from 'next/server';

// Initialize the admin client to bypass RLS for secure server-side operations
const supabaseAdmin = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(req: NextRequest) {
    try {
        const {
            instrument_id,
            student_stdn_id,
            rent_start,
            rent_end,
            payment_method = 'Card',
            room_id = null
        } = await req.json();

        if (!instrument_id || !student_stdn_id || !rent_start || !rent_end) {
            return NextResponse.json({ error: 'Missing required booking details.' }, { status: 400 });
        }

        // 1. Validate that the student exists
        const { error: studentError } = await supabaseAdmin
            .from('Student')
            .select('stdn_id')
            .eq('stdn_id', student_stdn_id)
            .single();

        if (studentError) {
            return NextResponse.json({ error: `Student ${student_stdn_id} not found.` }, { status: 404 });
        }

        // 2. Check Instrument Availability and get its price
        const { data: instrument, error: instrumentError } = await supabaseAdmin
            .from('Instrument')
            .select('inst_id, inst_status, inst_rentalprice') // Use the correct column name as per your schema
            .eq('inst_id', instrument_id)
            .single();

        if (instrumentError) {
            return NextResponse.json({ error: 'Instrument not found.' }, { status: 404 });
        }
        if (instrument.inst_status !== 'Ready') {
            return NextResponse.json({ error: `Instrument '${instrument_id}' is not available. Status: ${instrument.inst_status}` }, { status: 409 });
        }

        // 3. Calculate total price using the fetched rental price
        const rentalPrice = instrument.inst_rentalprice || 0;
        const hours = (new Date(rent_end).getTime() - new Date(rent_start).getTime()) / (1000 * 60 * 60);
        const totalPrice = rentalPrice * Math.max(1, Math.ceil(hours));

        // 4. Get an employee to associate with the transaction
        const { data: employees, error: empError } = await supabaseAdmin.from('Employee').select('empl_nik').limit(1);
        if (empError || !employees || employees.length === 0) {
            return NextResponse.json({ error: 'Internal server error: Could not assign employee.' }, { status: 500 });
        }
        const employee_empl_nik = employees[0].empl_nik;

        // 5. Create the Rental_Transaction record (ID is auto-generated by the database)
        const { data: transactionData, error: transactionError } = await supabaseAdmin
            .from('Rental_Transaction')
            .insert({
                trsc_transactiondate: new Date().toISOString(),
                trsc_paymentmethod: payment_method,
                trsc_rentstart: new Date(rent_start).toISOString(),
                trsc_rentend: new Date(rent_end).toISOString(),
                trsc_totalprice: totalPrice,
                Student_stdn_id: student_stdn_id,
                Room_room_id: room_id,
                Employee_empl_nik: employee_empl_nik
            })
            .select('trsc_id') // Select the ID that the database generated
            .single();

        if (transactionError) {
            console.error('Transaction insert error:', transactionError);
            return NextResponse.json({ error: `Failed to create transaction: ${transactionError.message}` }, { status: 500 });
        }

        const newTransactionId = transactionData.trsc_id; // The new UUID

        // 6. Link the instrument to the transaction in the junction table
        const { error: transInstError } = await supabaseAdmin
            .from('Transaction_Instrument')
            .insert({
                "Transaction_trsc_id": newTransactionId,
                "Instrument_inst_id": instrument_id,
            });

        if (transInstError) {
            await supabaseAdmin.from('Rental_Transaction').delete().eq('trsc_id', newTransactionId); // Attempt to rollback
            return NextResponse.json({ error: `Failed to link instrument: ${transInstError.message}` }, { status: 500 });
        }

        // 7. Update the instrument's status to 'InUse'
        await supabaseAdmin
            .from('Instrument')
            .update({ inst_status: 'InUse' })
            .eq('inst_id', instrument_id);

        // 8. Award Membership Points if the student is a member
        const { data: membership } = await supabaseAdmin
            .from('Membership')
            .select('mmbr_id, mmbr_points')
            .eq('Student_stdn_id', student_stdn_id)
            .single();

        if (membership) {
            const pointsToAdd = Math.floor(totalPrice / 10000); // Example: 1 point per 10,000 spent
            if (pointsToAdd > 0) {
              const newPoints = (membership.mmbr_points || 0) + pointsToAdd;
              await supabaseAdmin
                  .from('Membership')
                  .update({ mmbr_points: newPoints })
                  .eq('mmbr_id', membership.mmbr_id);
              console.log(`Awarded ${pointsToAdd} points. New total: ${newPoints}`);
            }
        }

        return NextResponse.json({ message: 'Booking successful!', transactionId: newTransactionId }, { status: 201 });

    } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred.';
        console.error('API Booking Error:', errorMessage);
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}